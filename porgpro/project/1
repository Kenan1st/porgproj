package project;

import project.tok.Model.*;
import project.tok.*;
import project.AST.*;
import java.util.ArrayList;
import java.util.Array;

public class UPNParser{
	
	private ArrayList<Token> t;

	public UPNParser(Token [] tok){

		this.t = new ArrayList<>(Arrays.asList(tok));
		
	}

	public Expr parse(){
		
		Expr Knoten = this.t.removeLast();

			var Z = this.t.removeLast();

			switch(Z){
			
				case Num(n) -> new CNST(n);
				case ident(s) -> new VA(s);
				case Op o -> {	var p = this.Op.Conv(o);
						var r = this.parse();
						var l = this.pars();
						yield new BiOp(p,l,r);
						}
				case SIN() -> new FUNC(Funcs.SIN,new Expr[] {this.parse()});
				case COS() -> new FUNC(Funcs.COS,new Expr[] {this.parse()});
				case TAN() -> new FUNC(Funcs.TAN,new Expr[] {this.parse()});
				case LOG() -> new FUNC(Funcs.LOG,this.parse());
				case SQRT() -> new FUNC(Funcs.SQRT,new Expr[] {this.parse()});
				case PI() -> new CNST(Math.Pi);
				case EUL() -> new CNST(Math.E);

			};

	}

	public BinOp OpConv(Op o){
		return switch(o){
			case Op.ADD -> BinOp.ADD;
			case Op.SUB -> BinOp.SUB;
			case Op.MUL -> BinOp.MUL;
			case Op.DIV -> BinOp.DIV;
			case Op.POW -> BinOp.POW;
		};
	}


}
